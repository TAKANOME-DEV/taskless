### Taskless.io GraphQL Schema @ https://for.taskless.io/api/graphql
### Last Generated: 2022-03-02T16:04:11.575-08:00
###
### For details about connecting via GraphQL,
### please see https://docs.taskless.io

"""
Literally any value
"""
scalar Any

type Application implements Node & Stamped {
  """
  The date & time this was created
  """
  createdAt: DateTime!
  id: ID!

  """
  A list of Jobs for this Application
  """
  jobs(
    """
    The maximum number of results to return. The maximum for this value is automatically set to 100.
    """
    limit: Int = 10

    """
    The starting location for pagination, defaulting to 0
    """
    offset: Int = 0
  ): [Job]

  """
  The common name for the Application
  """
  name: String!

  """
  The date & time this was last updated
  """
  updatedAt: DateTime!
}

input CreateJobInputType {
  """
  The body to send to the specified endpoint
  """
  body: String = null

  """
  Identifies if the job is currently enabled, defaults to TRUE
  """
  enabled: Boolean

  """
  The URL to request
  """
  endpoint: String!

  """
  Optional headers to include with the request
  """
  headers: [HeaderInputType!] = null

  """
  The HTTP method to use when calling the endpoint
  """
  method: JobMethodEnum = POST

  """
  If the job fails, how many times should it be retried? Defaults to 5.
  """
  retries: Int = 5

  """
  A time in the future when this job should be run. If ommitted, defaults to immediately on receipt. You cannot specify `runAt` and `cron` at the same time
  """
  runAt: DateTime = null

  """
  Converts the Job to a recurring Job. Subsequent runs will occur this `duration` after every execution
  """
  runEvery: Duration = null
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"\n    A string representing a duration conforming to the ISO8601 standard,\n    such as: P1W1DT13H23M34S\n    P is the duration designator (for period) placed at the start of the duration representation.\n    Y is the year designator that follows the value for the number of years.\n    M is the month designator that follows the value for the number of months.\n    W is the week designator that follows the value for the number of weeks.\n    D is the day designator that follows the value for the number of days.\n    T is the time designator that precedes the time components of the representation.\n    H is the hour designator that follows the value for the number of hours.\n    M is the minute designator that follows the value for the number of minutes.\n    S is the second designator that follows the value for the number of seconds.\n\n    Note the time designator, T, that precedes the time value.\n\n    Matches moment.js, Luxon and DateFns implementations\n    ,/. is valid for decimal places and +/- is a valid prefix\n  "
scalar Duration

"""
A header key/value pair
"""
input HeaderInputType {
  """
  The header's name
  """
  name: String!

  """
  The header's value
  """
  value: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

"""
Describes a Taskless Job. Job names are unique to the application and
specify both the requested time for their first inovcation and timestamps
for subsequent runs. In addition to a name, Jobs are given a unique ID
that is a UUID v5 identifier of the Job's name, with the UUID of the
Application as the namespace.
"""
type Job implements Node & Stamped {
  """
  The Application that owns this Job
  """
  application: Application

  """
  Optional body content to include with the request
  """
  body: String

  """
  The date & time this was created
  """
  createdAt: DateTime!

  """
  Specifies if the job is currently enabled
  """
  enabled: Boolean!

  """
  The URL to call when this Job runs
  """
  endpoint: String!

  """
  Optional key/value pairs to be sent as headers to the endpoint
  """
  headers: JSON
  id: ID!

  """
  The HTTP method to use when calling this endpoint
  """
  method: JobMethodEnum!

  """
  The common name for the Job, unique to the application
  """
  name: String!

  """
  The number of attempts that will be made before the job run is marked as FAILED
  """
  retries: Int!

  """
  When in the future this Job should first be run
  """
  runAt: DateTime!

  """
  Make the Job recurring by waiting this amount of time between
  invocations. Time is defined as a standard ISO-8601 duration
  """
  runEvery: Duration

  """
  Any Runners associated with the Job
  """
  runners(
    """
    The maximum number of results to return. The maximum for this value is automatically set to 100.
    """
    limit: Int = 10

    """
    The starting location for pagination, defaulting to 0
    """
    offset: Int = 0
  ): [Runner]

  """
  The date & time this was last updated
  """
  updatedAt: DateTime!
}

"""
Valid HTTP methods for Taskless Jobs
"""
enum JobMethodEnum {
  GET
  POST
}

type Mutation {
  """
  Create a new Job, which will call the specified endpoint at the
  requested time. Options can be orovided for run frequency, as well
  as headers and postable body. Will error if a Job already exists
  with the requested name. If you would like to upsert the result,
  instead use CreateOrUpdateJob.
  """
  createJob(
    job: CreateJobInputType!

    """
    A name for this Job, unique to the Application
    """
    name: String!
  ): Job!

  """
  Delete a job by its specified name. Returns null if no matching job was deleted.
  """
  deleteJob(
    """
    A name for this Job, unique to the Application
    """
    name: String!
  ): Job

  """
  Creates a job with the included unique name for the Application. If a
  Job already exists with the requested name, this operation will instead
  update the existing Job with the new values.
  """
  replaceJob(
    job: ReplaceJobInputType!

    """
    A name for this Job, unique to the Application
    """
    name: String!
  ): Job!

  """
  Updates a Job by the specified name. Will error if a job does not
  exist inside of the Application with the requested name.
  """
  updateJob(
    job: UpdateJobInputType!

    """
    A name for this Job, unique to the Application
    """
    name: String!
  ): Job!
}

"""
Describes an object that is uniquely identifiable by a
unique ID record
"""
interface Node {
  id: ID!
}

type Query {
  application: Application

  """
  Retrieve a Job by its common name
  """
  job(
    """
    name of the job
    """
    name: String!
  ): Job

  """
  Return a list of jobs
  """
  jobs(
    """
    The maximum number of results to return. The maximum for this value is automatically set to 100.
    """
    limit: Int = 10

    """
    The starting location for pagination, defaulting to 0
    """
    offset: Int = 0
  ): [Job]

  """
  Returns a list of Runners
  """
  runners(
    """
    The maximum number of results to return. The maximum for this value is automatically set to 100.
    """
    limit: Int = 10

    """
    The starting location for pagination, defaulting to 0
    """
    offset: Int = 0
  ): [Runner]
}

input ReplaceJobInputType {
  """
  The body to send to the specified endpoint
  """
  body: String = null

  """
  Identifies if the job is currently enabled, defaults to TRUE
  """
  enabled: Boolean

  """
  The URL to request
  """
  endpoint: String!

  """
  Optional headers to include with the request
  """
  headers: [HeaderInputType!] = null

  """
  The HTTP method to use when calling the endpoint
  """
  method: JobMethodEnum = POST

  """
  If the job fails, how many times should it be retried? Defaults to 5.
  """
  retries: Int = 5

  """
  A time in the future when this job should be run. If ommitted, defaults to immediately on receipt. You cannot specify `runAt` and `cron` at the same time
  """
  runAt: DateTime = null

  """
  Converts the Job to a recurring Job. Subsequent runs will occur this `duration` after every execution
  """
  runEvery: Duration = null
}

type Runner implements Node & Stamped {
  """
  The date & time this was created
  """
  createdAt: DateTime!

  """
  Any non-output errors captured during execution of the Job
  """
  errors: String
  id: ID!

  """
  The Job that owns this Runner
  """
  job: Job!

  """
  The status of the Job Runner
  """
  status: RunnerStatusEnum!

  """
  If a runner has executed, this contains the HTTP status code encountered
  """
  statusCode: Int

  """
  The truncated output from the page, capped to the first 1,000 characters
  """
  text: String

  """
  The date & time this was last updated
  """
  updatedAt: DateTime!
}

"""
The Job Runner's status
"""
enum RunnerStatusEnum {
  ABORTED
  COMPLETED
  FAILED
  RUNNING
  SCHEDULED
}

"""
Describes an object that contains timestamp records for both
its creation and most recently updated values.
"""
interface Stamped {
  """
  The date & time this was created
  """
  createdAt: DateTime!

  """
  The date & time this was last updated
  """
  updatedAt: DateTime!
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

input UpdateJobInputType {
  """
  The body to send to the specified endpoint
  """
  body: String = null

  """
  Identifies if the job is currently enabled, defaults to TRUE
  """
  enabled: Boolean

  """
  The URL to request
  """
  endpoint: String

  """
  Optional headers to include with the request
  """
  headers: [HeaderInputType!] = null

  """
  The HTTP method to use when calling the endpoint
  """
  method: JobMethodEnum = POST

  """
  If the job fails, how many times should it be retried? Defaults to 5.
  """
  retries: Int = 5

  """
  A time in the future when this job should be run. If ommitted, defaults to immediately on receipt. You cannot specify `runAt` and `cron` at the same time
  """
  runAt: DateTime = null

  """
  Converts the Job to a recurring Job. Subsequent runs will occur this `duration` after every execution
  """
  runEvery: Duration = null
}
